/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.minimart.portlet.dathang.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.minimart.portlet.dathang.model.DatHangChiTiet;
import com.minimart.portlet.dathang.service.DatHangChiTietLocalService;
import com.minimart.portlet.dathang.service.persistence.DatHangChiTietPersistence;
import com.minimart.portlet.dathang.service.persistence.DatHangPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the dat hang chi tiet local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.minimart.portlet.dathang.service.impl.DatHangChiTietLocalServiceImpl}.
 * </p>
 *
 * @author Mai Th√†nh Duy An
 * @see com.minimart.portlet.dathang.service.impl.DatHangChiTietLocalServiceImpl
 * @see com.minimart.portlet.dathang.service.DatHangChiTietLocalServiceUtil
 * @generated
 */
public abstract class DatHangChiTietLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements DatHangChiTietLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.minimart.portlet.dathang.service.DatHangChiTietLocalServiceUtil} to access the dat hang chi tiet local service.
	 */

	/**
	 * Adds the dat hang chi tiet to the database. Also notifies the appropriate model listeners.
	 *
	 * @param datHangChiTiet the dat hang chi tiet
	 * @return the dat hang chi tiet that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DatHangChiTiet addDatHangChiTiet(DatHangChiTiet datHangChiTiet)
		throws SystemException {
		datHangChiTiet.setNew(true);

		return datHangChiTietPersistence.update(datHangChiTiet);
	}

	/**
	 * Creates a new dat hang chi tiet with the primary key. Does not add the dat hang chi tiet to the database.
	 *
	 * @param datHangChiTietId the primary key for the new dat hang chi tiet
	 * @return the new dat hang chi tiet
	 */
	@Override
	public DatHangChiTiet createDatHangChiTiet(long datHangChiTietId) {
		return datHangChiTietPersistence.create(datHangChiTietId);
	}

	/**
	 * Deletes the dat hang chi tiet with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param datHangChiTietId the primary key of the dat hang chi tiet
	 * @return the dat hang chi tiet that was removed
	 * @throws PortalException if a dat hang chi tiet with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DatHangChiTiet deleteDatHangChiTiet(long datHangChiTietId)
		throws PortalException, SystemException {
		return datHangChiTietPersistence.remove(datHangChiTietId);
	}

	/**
	 * Deletes the dat hang chi tiet from the database. Also notifies the appropriate model listeners.
	 *
	 * @param datHangChiTiet the dat hang chi tiet
	 * @return the dat hang chi tiet that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DatHangChiTiet deleteDatHangChiTiet(DatHangChiTiet datHangChiTiet)
		throws SystemException {
		return datHangChiTietPersistence.remove(datHangChiTiet);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(DatHangChiTiet.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return datHangChiTietPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.minimart.portlet.dathang.model.impl.DatHangChiTietModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return datHangChiTietPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.minimart.portlet.dathang.model.impl.DatHangChiTietModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return datHangChiTietPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return datHangChiTietPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return datHangChiTietPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public DatHangChiTiet fetchDatHangChiTiet(long datHangChiTietId)
		throws SystemException {
		return datHangChiTietPersistence.fetchByPrimaryKey(datHangChiTietId);
	}

	/**
	 * Returns the dat hang chi tiet with the primary key.
	 *
	 * @param datHangChiTietId the primary key of the dat hang chi tiet
	 * @return the dat hang chi tiet
	 * @throws PortalException if a dat hang chi tiet with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public DatHangChiTiet getDatHangChiTiet(long datHangChiTietId)
		throws PortalException, SystemException {
		return datHangChiTietPersistence.findByPrimaryKey(datHangChiTietId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return datHangChiTietPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the dat hang chi tiets.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.minimart.portlet.dathang.model.impl.DatHangChiTietModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of dat hang chi tiets
	 * @param end the upper bound of the range of dat hang chi tiets (not inclusive)
	 * @return the range of dat hang chi tiets
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<DatHangChiTiet> getDatHangChiTiets(int start, int end)
		throws SystemException {
		return datHangChiTietPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of dat hang chi tiets.
	 *
	 * @return the number of dat hang chi tiets
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getDatHangChiTietsCount() throws SystemException {
		return datHangChiTietPersistence.countAll();
	}

	/**
	 * Updates the dat hang chi tiet in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param datHangChiTiet the dat hang chi tiet
	 * @return the dat hang chi tiet that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DatHangChiTiet updateDatHangChiTiet(DatHangChiTiet datHangChiTiet)
		throws SystemException {
		return datHangChiTietPersistence.update(datHangChiTiet);
	}

	/**
	 * Returns the dat hang local service.
	 *
	 * @return the dat hang local service
	 */
	public com.minimart.portlet.dathang.service.DatHangLocalService getDatHangLocalService() {
		return datHangLocalService;
	}

	/**
	 * Sets the dat hang local service.
	 *
	 * @param datHangLocalService the dat hang local service
	 */
	public void setDatHangLocalService(
		com.minimart.portlet.dathang.service.DatHangLocalService datHangLocalService) {
		this.datHangLocalService = datHangLocalService;
	}

	/**
	 * Returns the dat hang remote service.
	 *
	 * @return the dat hang remote service
	 */
	public com.minimart.portlet.dathang.service.DatHangService getDatHangService() {
		return datHangService;
	}

	/**
	 * Sets the dat hang remote service.
	 *
	 * @param datHangService the dat hang remote service
	 */
	public void setDatHangService(
		com.minimart.portlet.dathang.service.DatHangService datHangService) {
		this.datHangService = datHangService;
	}

	/**
	 * Returns the dat hang persistence.
	 *
	 * @return the dat hang persistence
	 */
	public DatHangPersistence getDatHangPersistence() {
		return datHangPersistence;
	}

	/**
	 * Sets the dat hang persistence.
	 *
	 * @param datHangPersistence the dat hang persistence
	 */
	public void setDatHangPersistence(DatHangPersistence datHangPersistence) {
		this.datHangPersistence = datHangPersistence;
	}

	/**
	 * Returns the dat hang chi tiet local service.
	 *
	 * @return the dat hang chi tiet local service
	 */
	public com.minimart.portlet.dathang.service.DatHangChiTietLocalService getDatHangChiTietLocalService() {
		return datHangChiTietLocalService;
	}

	/**
	 * Sets the dat hang chi tiet local service.
	 *
	 * @param datHangChiTietLocalService the dat hang chi tiet local service
	 */
	public void setDatHangChiTietLocalService(
		com.minimart.portlet.dathang.service.DatHangChiTietLocalService datHangChiTietLocalService) {
		this.datHangChiTietLocalService = datHangChiTietLocalService;
	}

	/**
	 * Returns the dat hang chi tiet remote service.
	 *
	 * @return the dat hang chi tiet remote service
	 */
	public com.minimart.portlet.dathang.service.DatHangChiTietService getDatHangChiTietService() {
		return datHangChiTietService;
	}

	/**
	 * Sets the dat hang chi tiet remote service.
	 *
	 * @param datHangChiTietService the dat hang chi tiet remote service
	 */
	public void setDatHangChiTietService(
		com.minimart.portlet.dathang.service.DatHangChiTietService datHangChiTietService) {
		this.datHangChiTietService = datHangChiTietService;
	}

	/**
	 * Returns the dat hang chi tiet persistence.
	 *
	 * @return the dat hang chi tiet persistence
	 */
	public DatHangChiTietPersistence getDatHangChiTietPersistence() {
		return datHangChiTietPersistence;
	}

	/**
	 * Sets the dat hang chi tiet persistence.
	 *
	 * @param datHangChiTietPersistence the dat hang chi tiet persistence
	 */
	public void setDatHangChiTietPersistence(
		DatHangChiTietPersistence datHangChiTietPersistence) {
		this.datHangChiTietPersistence = datHangChiTietPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.minimart.portlet.dathang.model.DatHangChiTiet",
			datHangChiTietLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.minimart.portlet.dathang.model.DatHangChiTiet");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return DatHangChiTiet.class;
	}

	protected String getModelClassName() {
		return DatHangChiTiet.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = datHangChiTietPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.minimart.portlet.dathang.service.DatHangLocalService.class)
	protected com.minimart.portlet.dathang.service.DatHangLocalService datHangLocalService;
	@BeanReference(type = com.minimart.portlet.dathang.service.DatHangService.class)
	protected com.minimart.portlet.dathang.service.DatHangService datHangService;
	@BeanReference(type = DatHangPersistence.class)
	protected DatHangPersistence datHangPersistence;
	@BeanReference(type = com.minimart.portlet.dathang.service.DatHangChiTietLocalService.class)
	protected com.minimart.portlet.dathang.service.DatHangChiTietLocalService datHangChiTietLocalService;
	@BeanReference(type = com.minimart.portlet.dathang.service.DatHangChiTietService.class)
	protected com.minimart.portlet.dathang.service.DatHangChiTietService datHangChiTietService;
	@BeanReference(type = DatHangChiTietPersistence.class)
	protected DatHangChiTietPersistence datHangChiTietPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private DatHangChiTietLocalServiceClpInvoker _clpInvoker = new DatHangChiTietLocalServiceClpInvoker();
}