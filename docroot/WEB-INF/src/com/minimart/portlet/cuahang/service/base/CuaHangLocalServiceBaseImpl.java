/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.minimart.portlet.cuahang.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.minimart.portlet.cuahang.model.CuaHang;
import com.minimart.portlet.cuahang.service.CuaHangLocalService;
import com.minimart.portlet.cuahang.service.persistence.CaLamViecPersistence;
import com.minimart.portlet.cuahang.service.persistence.CuaHangPersistence;
import com.minimart.portlet.cuahang.service.persistence.TangCaPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the cua hang local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.minimart.portlet.cuahang.service.impl.CuaHangLocalServiceImpl}.
 * </p>
 *
 * @author Mai Th√†nh Duy An
 * @see com.minimart.portlet.cuahang.service.impl.CuaHangLocalServiceImpl
 * @see com.minimart.portlet.cuahang.service.CuaHangLocalServiceUtil
 * @generated
 */
public abstract class CuaHangLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements CuaHangLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.minimart.portlet.cuahang.service.CuaHangLocalServiceUtil} to access the cua hang local service.
	 */

	/**
	 * Adds the cua hang to the database. Also notifies the appropriate model listeners.
	 *
	 * @param cuaHang the cua hang
	 * @return the cua hang that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CuaHang addCuaHang(CuaHang cuaHang) throws SystemException {
		cuaHang.setNew(true);

		return cuaHangPersistence.update(cuaHang);
	}

	/**
	 * Creates a new cua hang with the primary key. Does not add the cua hang to the database.
	 *
	 * @param cuaHangId the primary key for the new cua hang
	 * @return the new cua hang
	 */
	@Override
	public CuaHang createCuaHang(long cuaHangId) {
		return cuaHangPersistence.create(cuaHangId);
	}

	/**
	 * Deletes the cua hang with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param cuaHangId the primary key of the cua hang
	 * @return the cua hang that was removed
	 * @throws PortalException if a cua hang with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CuaHang deleteCuaHang(long cuaHangId)
		throws PortalException, SystemException {
		return cuaHangPersistence.remove(cuaHangId);
	}

	/**
	 * Deletes the cua hang from the database. Also notifies the appropriate model listeners.
	 *
	 * @param cuaHang the cua hang
	 * @return the cua hang that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CuaHang deleteCuaHang(CuaHang cuaHang) throws SystemException {
		return cuaHangPersistence.remove(cuaHang);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CuaHang.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return cuaHangPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.minimart.portlet.cuahang.model.impl.CuaHangModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return cuaHangPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.minimart.portlet.cuahang.model.impl.CuaHangModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return cuaHangPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return cuaHangPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return cuaHangPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public CuaHang fetchCuaHang(long cuaHangId) throws SystemException {
		return cuaHangPersistence.fetchByPrimaryKey(cuaHangId);
	}

	/**
	 * Returns the cua hang with the matching UUID and company.
	 *
	 * @param uuid the cua hang's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching cua hang, or <code>null</code> if a matching cua hang could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public CuaHang fetchCuaHangByUuidAndCompanyId(String uuid, long companyId)
		throws SystemException {
		return cuaHangPersistence.fetchByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the cua hang with the primary key.
	 *
	 * @param cuaHangId the primary key of the cua hang
	 * @return the cua hang
	 * @throws PortalException if a cua hang with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public CuaHang getCuaHang(long cuaHangId)
		throws PortalException, SystemException {
		return cuaHangPersistence.findByPrimaryKey(cuaHangId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return cuaHangPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the cua hang with the matching UUID and company.
	 *
	 * @param uuid the cua hang's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching cua hang
	 * @throws PortalException if a matching cua hang could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public CuaHang getCuaHangByUuidAndCompanyId(String uuid, long companyId)
		throws PortalException, SystemException {
		return cuaHangPersistence.findByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns a range of all the cua hangs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.minimart.portlet.cuahang.model.impl.CuaHangModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of cua hangs
	 * @param end the upper bound of the range of cua hangs (not inclusive)
	 * @return the range of cua hangs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<CuaHang> getCuaHangs(int start, int end)
		throws SystemException {
		return cuaHangPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of cua hangs.
	 *
	 * @return the number of cua hangs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getCuaHangsCount() throws SystemException {
		return cuaHangPersistence.countAll();
	}

	/**
	 * Updates the cua hang in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param cuaHang the cua hang
	 * @return the cua hang that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CuaHang updateCuaHang(CuaHang cuaHang) throws SystemException {
		return cuaHangPersistence.update(cuaHang);
	}

	/**
	 * Returns the ca lam viec local service.
	 *
	 * @return the ca lam viec local service
	 */
	public com.minimart.portlet.cuahang.service.CaLamViecLocalService getCaLamViecLocalService() {
		return caLamViecLocalService;
	}

	/**
	 * Sets the ca lam viec local service.
	 *
	 * @param caLamViecLocalService the ca lam viec local service
	 */
	public void setCaLamViecLocalService(
		com.minimart.portlet.cuahang.service.CaLamViecLocalService caLamViecLocalService) {
		this.caLamViecLocalService = caLamViecLocalService;
	}

	/**
	 * Returns the ca lam viec remote service.
	 *
	 * @return the ca lam viec remote service
	 */
	public com.minimart.portlet.cuahang.service.CaLamViecService getCaLamViecService() {
		return caLamViecService;
	}

	/**
	 * Sets the ca lam viec remote service.
	 *
	 * @param caLamViecService the ca lam viec remote service
	 */
	public void setCaLamViecService(
		com.minimart.portlet.cuahang.service.CaLamViecService caLamViecService) {
		this.caLamViecService = caLamViecService;
	}

	/**
	 * Returns the ca lam viec persistence.
	 *
	 * @return the ca lam viec persistence
	 */
	public CaLamViecPersistence getCaLamViecPersistence() {
		return caLamViecPersistence;
	}

	/**
	 * Sets the ca lam viec persistence.
	 *
	 * @param caLamViecPersistence the ca lam viec persistence
	 */
	public void setCaLamViecPersistence(
		CaLamViecPersistence caLamViecPersistence) {
		this.caLamViecPersistence = caLamViecPersistence;
	}

	/**
	 * Returns the cua hang local service.
	 *
	 * @return the cua hang local service
	 */
	public com.minimart.portlet.cuahang.service.CuaHangLocalService getCuaHangLocalService() {
		return cuaHangLocalService;
	}

	/**
	 * Sets the cua hang local service.
	 *
	 * @param cuaHangLocalService the cua hang local service
	 */
	public void setCuaHangLocalService(
		com.minimart.portlet.cuahang.service.CuaHangLocalService cuaHangLocalService) {
		this.cuaHangLocalService = cuaHangLocalService;
	}

	/**
	 * Returns the cua hang remote service.
	 *
	 * @return the cua hang remote service
	 */
	public com.minimart.portlet.cuahang.service.CuaHangService getCuaHangService() {
		return cuaHangService;
	}

	/**
	 * Sets the cua hang remote service.
	 *
	 * @param cuaHangService the cua hang remote service
	 */
	public void setCuaHangService(
		com.minimart.portlet.cuahang.service.CuaHangService cuaHangService) {
		this.cuaHangService = cuaHangService;
	}

	/**
	 * Returns the cua hang persistence.
	 *
	 * @return the cua hang persistence
	 */
	public CuaHangPersistence getCuaHangPersistence() {
		return cuaHangPersistence;
	}

	/**
	 * Sets the cua hang persistence.
	 *
	 * @param cuaHangPersistence the cua hang persistence
	 */
	public void setCuaHangPersistence(CuaHangPersistence cuaHangPersistence) {
		this.cuaHangPersistence = cuaHangPersistence;
	}

	/**
	 * Returns the tang ca local service.
	 *
	 * @return the tang ca local service
	 */
	public com.minimart.portlet.cuahang.service.TangCaLocalService getTangCaLocalService() {
		return tangCaLocalService;
	}

	/**
	 * Sets the tang ca local service.
	 *
	 * @param tangCaLocalService the tang ca local service
	 */
	public void setTangCaLocalService(
		com.minimart.portlet.cuahang.service.TangCaLocalService tangCaLocalService) {
		this.tangCaLocalService = tangCaLocalService;
	}

	/**
	 * Returns the tang ca remote service.
	 *
	 * @return the tang ca remote service
	 */
	public com.minimart.portlet.cuahang.service.TangCaService getTangCaService() {
		return tangCaService;
	}

	/**
	 * Sets the tang ca remote service.
	 *
	 * @param tangCaService the tang ca remote service
	 */
	public void setTangCaService(
		com.minimart.portlet.cuahang.service.TangCaService tangCaService) {
		this.tangCaService = tangCaService;
	}

	/**
	 * Returns the tang ca persistence.
	 *
	 * @return the tang ca persistence
	 */
	public TangCaPersistence getTangCaPersistence() {
		return tangCaPersistence;
	}

	/**
	 * Sets the tang ca persistence.
	 *
	 * @param tangCaPersistence the tang ca persistence
	 */
	public void setTangCaPersistence(TangCaPersistence tangCaPersistence) {
		this.tangCaPersistence = tangCaPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.minimart.portlet.cuahang.model.CuaHang",
			cuaHangLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.minimart.portlet.cuahang.model.CuaHang");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return CuaHang.class;
	}

	protected String getModelClassName() {
		return CuaHang.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = cuaHangPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.minimart.portlet.cuahang.service.CaLamViecLocalService.class)
	protected com.minimart.portlet.cuahang.service.CaLamViecLocalService caLamViecLocalService;
	@BeanReference(type = com.minimart.portlet.cuahang.service.CaLamViecService.class)
	protected com.minimart.portlet.cuahang.service.CaLamViecService caLamViecService;
	@BeanReference(type = CaLamViecPersistence.class)
	protected CaLamViecPersistence caLamViecPersistence;
	@BeanReference(type = com.minimart.portlet.cuahang.service.CuaHangLocalService.class)
	protected com.minimart.portlet.cuahang.service.CuaHangLocalService cuaHangLocalService;
	@BeanReference(type = com.minimart.portlet.cuahang.service.CuaHangService.class)
	protected com.minimart.portlet.cuahang.service.CuaHangService cuaHangService;
	@BeanReference(type = CuaHangPersistence.class)
	protected CuaHangPersistence cuaHangPersistence;
	@BeanReference(type = com.minimart.portlet.cuahang.service.TangCaLocalService.class)
	protected com.minimart.portlet.cuahang.service.TangCaLocalService tangCaLocalService;
	@BeanReference(type = com.minimart.portlet.cuahang.service.TangCaService.class)
	protected com.minimart.portlet.cuahang.service.TangCaService tangCaService;
	@BeanReference(type = TangCaPersistence.class)
	protected TangCaPersistence tangCaPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private CuaHangLocalServiceClpInvoker _clpInvoker = new CuaHangLocalServiceClpInvoker();
}