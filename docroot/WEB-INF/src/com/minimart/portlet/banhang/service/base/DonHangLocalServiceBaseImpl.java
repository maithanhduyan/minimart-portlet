/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.minimart.portlet.banhang.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.minimart.portlet.banhang.model.DonHang;
import com.minimart.portlet.banhang.service.DonHangLocalService;
import com.minimart.portlet.banhang.service.persistence.DonHangChiTietPersistence;
import com.minimart.portlet.banhang.service.persistence.DonHangPersistence;
import com.minimart.portlet.banhang.service.persistence.TrangThaiDonHangPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the don hang local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.minimart.portlet.banhang.service.impl.DonHangLocalServiceImpl}.
 * </p>
 *
 * @author Mai Th√†nh Duy An
 * @see com.minimart.portlet.banhang.service.impl.DonHangLocalServiceImpl
 * @see com.minimart.portlet.banhang.service.DonHangLocalServiceUtil
 * @generated
 */
public abstract class DonHangLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements DonHangLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.minimart.portlet.banhang.service.DonHangLocalServiceUtil} to access the don hang local service.
	 */

	/**
	 * Adds the don hang to the database. Also notifies the appropriate model listeners.
	 *
	 * @param donHang the don hang
	 * @return the don hang that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DonHang addDonHang(DonHang donHang) throws SystemException {
		donHang.setNew(true);

		return donHangPersistence.update(donHang);
	}

	/**
	 * Creates a new don hang with the primary key. Does not add the don hang to the database.
	 *
	 * @param donHangId the primary key for the new don hang
	 * @return the new don hang
	 */
	@Override
	public DonHang createDonHang(long donHangId) {
		return donHangPersistence.create(donHangId);
	}

	/**
	 * Deletes the don hang with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param donHangId the primary key of the don hang
	 * @return the don hang that was removed
	 * @throws PortalException if a don hang with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DonHang deleteDonHang(long donHangId)
		throws PortalException, SystemException {
		return donHangPersistence.remove(donHangId);
	}

	/**
	 * Deletes the don hang from the database. Also notifies the appropriate model listeners.
	 *
	 * @param donHang the don hang
	 * @return the don hang that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DonHang deleteDonHang(DonHang donHang) throws SystemException {
		return donHangPersistence.remove(donHang);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(DonHang.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return donHangPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.minimart.portlet.banhang.model.impl.DonHangModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return donHangPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.minimart.portlet.banhang.model.impl.DonHangModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return donHangPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return donHangPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return donHangPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public DonHang fetchDonHang(long donHangId) throws SystemException {
		return donHangPersistence.fetchByPrimaryKey(donHangId);
	}

	/**
	 * Returns the don hang with the primary key.
	 *
	 * @param donHangId the primary key of the don hang
	 * @return the don hang
	 * @throws PortalException if a don hang with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public DonHang getDonHang(long donHangId)
		throws PortalException, SystemException {
		return donHangPersistence.findByPrimaryKey(donHangId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return donHangPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the don hangs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.minimart.portlet.banhang.model.impl.DonHangModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of don hangs
	 * @param end the upper bound of the range of don hangs (not inclusive)
	 * @return the range of don hangs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<DonHang> getDonHangs(int start, int end)
		throws SystemException {
		return donHangPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of don hangs.
	 *
	 * @return the number of don hangs
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getDonHangsCount() throws SystemException {
		return donHangPersistence.countAll();
	}

	/**
	 * Updates the don hang in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param donHang the don hang
	 * @return the don hang that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DonHang updateDonHang(DonHang donHang) throws SystemException {
		return donHangPersistence.update(donHang);
	}

	/**
	 * Returns the don hang local service.
	 *
	 * @return the don hang local service
	 */
	public com.minimart.portlet.banhang.service.DonHangLocalService getDonHangLocalService() {
		return donHangLocalService;
	}

	/**
	 * Sets the don hang local service.
	 *
	 * @param donHangLocalService the don hang local service
	 */
	public void setDonHangLocalService(
		com.minimart.portlet.banhang.service.DonHangLocalService donHangLocalService) {
		this.donHangLocalService = donHangLocalService;
	}

	/**
	 * Returns the don hang remote service.
	 *
	 * @return the don hang remote service
	 */
	public com.minimart.portlet.banhang.service.DonHangService getDonHangService() {
		return donHangService;
	}

	/**
	 * Sets the don hang remote service.
	 *
	 * @param donHangService the don hang remote service
	 */
	public void setDonHangService(
		com.minimart.portlet.banhang.service.DonHangService donHangService) {
		this.donHangService = donHangService;
	}

	/**
	 * Returns the don hang persistence.
	 *
	 * @return the don hang persistence
	 */
	public DonHangPersistence getDonHangPersistence() {
		return donHangPersistence;
	}

	/**
	 * Sets the don hang persistence.
	 *
	 * @param donHangPersistence the don hang persistence
	 */
	public void setDonHangPersistence(DonHangPersistence donHangPersistence) {
		this.donHangPersistence = donHangPersistence;
	}

	/**
	 * Returns the don hang chi tiet local service.
	 *
	 * @return the don hang chi tiet local service
	 */
	public com.minimart.portlet.banhang.service.DonHangChiTietLocalService getDonHangChiTietLocalService() {
		return donHangChiTietLocalService;
	}

	/**
	 * Sets the don hang chi tiet local service.
	 *
	 * @param donHangChiTietLocalService the don hang chi tiet local service
	 */
	public void setDonHangChiTietLocalService(
		com.minimart.portlet.banhang.service.DonHangChiTietLocalService donHangChiTietLocalService) {
		this.donHangChiTietLocalService = donHangChiTietLocalService;
	}

	/**
	 * Returns the don hang chi tiet remote service.
	 *
	 * @return the don hang chi tiet remote service
	 */
	public com.minimart.portlet.banhang.service.DonHangChiTietService getDonHangChiTietService() {
		return donHangChiTietService;
	}

	/**
	 * Sets the don hang chi tiet remote service.
	 *
	 * @param donHangChiTietService the don hang chi tiet remote service
	 */
	public void setDonHangChiTietService(
		com.minimart.portlet.banhang.service.DonHangChiTietService donHangChiTietService) {
		this.donHangChiTietService = donHangChiTietService;
	}

	/**
	 * Returns the don hang chi tiet persistence.
	 *
	 * @return the don hang chi tiet persistence
	 */
	public DonHangChiTietPersistence getDonHangChiTietPersistence() {
		return donHangChiTietPersistence;
	}

	/**
	 * Sets the don hang chi tiet persistence.
	 *
	 * @param donHangChiTietPersistence the don hang chi tiet persistence
	 */
	public void setDonHangChiTietPersistence(
		DonHangChiTietPersistence donHangChiTietPersistence) {
		this.donHangChiTietPersistence = donHangChiTietPersistence;
	}

	/**
	 * Returns the trang thai don hang local service.
	 *
	 * @return the trang thai don hang local service
	 */
	public com.minimart.portlet.banhang.service.TrangThaiDonHangLocalService getTrangThaiDonHangLocalService() {
		return trangThaiDonHangLocalService;
	}

	/**
	 * Sets the trang thai don hang local service.
	 *
	 * @param trangThaiDonHangLocalService the trang thai don hang local service
	 */
	public void setTrangThaiDonHangLocalService(
		com.minimart.portlet.banhang.service.TrangThaiDonHangLocalService trangThaiDonHangLocalService) {
		this.trangThaiDonHangLocalService = trangThaiDonHangLocalService;
	}

	/**
	 * Returns the trang thai don hang remote service.
	 *
	 * @return the trang thai don hang remote service
	 */
	public com.minimart.portlet.banhang.service.TrangThaiDonHangService getTrangThaiDonHangService() {
		return trangThaiDonHangService;
	}

	/**
	 * Sets the trang thai don hang remote service.
	 *
	 * @param trangThaiDonHangService the trang thai don hang remote service
	 */
	public void setTrangThaiDonHangService(
		com.minimart.portlet.banhang.service.TrangThaiDonHangService trangThaiDonHangService) {
		this.trangThaiDonHangService = trangThaiDonHangService;
	}

	/**
	 * Returns the trang thai don hang persistence.
	 *
	 * @return the trang thai don hang persistence
	 */
	public TrangThaiDonHangPersistence getTrangThaiDonHangPersistence() {
		return trangThaiDonHangPersistence;
	}

	/**
	 * Sets the trang thai don hang persistence.
	 *
	 * @param trangThaiDonHangPersistence the trang thai don hang persistence
	 */
	public void setTrangThaiDonHangPersistence(
		TrangThaiDonHangPersistence trangThaiDonHangPersistence) {
		this.trangThaiDonHangPersistence = trangThaiDonHangPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.minimart.portlet.banhang.model.DonHang",
			donHangLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.minimart.portlet.banhang.model.DonHang");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return DonHang.class;
	}

	protected String getModelClassName() {
		return DonHang.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = donHangPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.minimart.portlet.banhang.service.DonHangLocalService.class)
	protected com.minimart.portlet.banhang.service.DonHangLocalService donHangLocalService;
	@BeanReference(type = com.minimart.portlet.banhang.service.DonHangService.class)
	protected com.minimart.portlet.banhang.service.DonHangService donHangService;
	@BeanReference(type = DonHangPersistence.class)
	protected DonHangPersistence donHangPersistence;
	@BeanReference(type = com.minimart.portlet.banhang.service.DonHangChiTietLocalService.class)
	protected com.minimart.portlet.banhang.service.DonHangChiTietLocalService donHangChiTietLocalService;
	@BeanReference(type = com.minimart.portlet.banhang.service.DonHangChiTietService.class)
	protected com.minimart.portlet.banhang.service.DonHangChiTietService donHangChiTietService;
	@BeanReference(type = DonHangChiTietPersistence.class)
	protected DonHangChiTietPersistence donHangChiTietPersistence;
	@BeanReference(type = com.minimart.portlet.banhang.service.TrangThaiDonHangLocalService.class)
	protected com.minimart.portlet.banhang.service.TrangThaiDonHangLocalService trangThaiDonHangLocalService;
	@BeanReference(type = com.minimart.portlet.banhang.service.TrangThaiDonHangService.class)
	protected com.minimart.portlet.banhang.service.TrangThaiDonHangService trangThaiDonHangService;
	@BeanReference(type = TrangThaiDonHangPersistence.class)
	protected TrangThaiDonHangPersistence trangThaiDonHangPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private DonHangLocalServiceClpInvoker _clpInvoker = new DonHangLocalServiceClpInvoker();
}