/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.minimart.portlet.banhang.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.minimart.portlet.banhang.model.DonHangChiTiet;
import com.minimart.portlet.banhang.model.DonHangChiTietModel;
import com.minimart.portlet.banhang.model.DonHangChiTietSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DonHangChiTiet service. Represents a row in the &quot;minimart_donhangchitiet&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.minimart.portlet.banhang.model.DonHangChiTietModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DonHangChiTietImpl}.
 * </p>
 *
 * @author Mai Th√†nh Duy An
 * @see DonHangChiTietImpl
 * @see com.minimart.portlet.banhang.model.DonHangChiTiet
 * @see com.minimart.portlet.banhang.model.DonHangChiTietModel
 * @generated
 */
@JSON(strict = true)
public class DonHangChiTietModelImpl extends BaseModelImpl<DonHangChiTiet>
	implements DonHangChiTietModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a don hang chi tiet model instance should use the {@link com.minimart.portlet.banhang.model.DonHangChiTiet} interface instead.
	 */
	public static final String TABLE_NAME = "minimart_donhangchitiet";
	public static final Object[][] TABLE_COLUMNS = {
			{ "donHangChiTietId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "donHangId", Types.BIGINT },
			{ "matHangId", Types.BIGINT },
			{ "soLuong", Types.INTEGER },
			{ "donViTinhId", Types.BIGINT },
			{ "thanhTien", Types.INTEGER },
			{ "tiLeGiamGia", Types.INTEGER },
			{ "kichThuoc", Types.VARCHAR },
			{ "hanSuDung", Types.TIMESTAMP },
			{ "hoatDong", Types.BOOLEAN },
			{ "huy", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table minimart_donhangchitiet (donHangChiTietId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,donHangId LONG,matHangId LONG,soLuong INTEGER,donViTinhId LONG,thanhTien INTEGER,tiLeGiamGia INTEGER,kichThuoc VARCHAR(75) null,hanSuDung DATE null,hoatDong BOOLEAN,huy BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table minimart_donhangchitiet";
	public static final String ORDER_BY_JPQL = " ORDER BY donHangChiTiet.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY minimart_donhangchitiet.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.minimart.portlet.banhang.model.DonHangChiTiet"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.minimart.portlet.banhang.model.DonHangChiTiet"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.minimart.portlet.banhang.model.DonHangChiTiet"),
			true);
	public static long DONHANGID_COLUMN_BITMASK = 1L;
	public static long HOATDONG_COLUMN_BITMASK = 2L;
	public static long MATHANGID_COLUMN_BITMASK = 4L;
	public static long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DonHangChiTiet toModel(DonHangChiTietSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DonHangChiTiet model = new DonHangChiTietImpl();

		model.setDonHangChiTietId(soapModel.getDonHangChiTietId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDonHangId(soapModel.getDonHangId());
		model.setMatHangId(soapModel.getMatHangId());
		model.setSoLuong(soapModel.getSoLuong());
		model.setDonViTinhId(soapModel.getDonViTinhId());
		model.setThanhTien(soapModel.getThanhTien());
		model.setTiLeGiamGia(soapModel.getTiLeGiamGia());
		model.setKichThuoc(soapModel.getKichThuoc());
		model.setHanSuDung(soapModel.getHanSuDung());
		model.setHoatDong(soapModel.getHoatDong());
		model.setHuy(soapModel.getHuy());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DonHangChiTiet> toModels(DonHangChiTietSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DonHangChiTiet> models = new ArrayList<DonHangChiTiet>(soapModels.length);

		for (DonHangChiTietSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.minimart.portlet.banhang.model.DonHangChiTiet"));

	public DonHangChiTietModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _donHangChiTietId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDonHangChiTietId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _donHangChiTietId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DonHangChiTiet.class;
	}

	@Override
	public String getModelClassName() {
		return DonHangChiTiet.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("donHangChiTietId", getDonHangChiTietId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("donHangId", getDonHangId());
		attributes.put("matHangId", getMatHangId());
		attributes.put("soLuong", getSoLuong());
		attributes.put("donViTinhId", getDonViTinhId());
		attributes.put("thanhTien", getThanhTien());
		attributes.put("tiLeGiamGia", getTiLeGiamGia());
		attributes.put("kichThuoc", getKichThuoc());
		attributes.put("hanSuDung", getHanSuDung());
		attributes.put("hoatDong", getHoatDong());
		attributes.put("huy", getHuy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long donHangChiTietId = (Long)attributes.get("donHangChiTietId");

		if (donHangChiTietId != null) {
			setDonHangChiTietId(donHangChiTietId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long donHangId = (Long)attributes.get("donHangId");

		if (donHangId != null) {
			setDonHangId(donHangId);
		}

		Long matHangId = (Long)attributes.get("matHangId");

		if (matHangId != null) {
			setMatHangId(matHangId);
		}

		Integer soLuong = (Integer)attributes.get("soLuong");

		if (soLuong != null) {
			setSoLuong(soLuong);
		}

		Long donViTinhId = (Long)attributes.get("donViTinhId");

		if (donViTinhId != null) {
			setDonViTinhId(donViTinhId);
		}

		Integer thanhTien = (Integer)attributes.get("thanhTien");

		if (thanhTien != null) {
			setThanhTien(thanhTien);
		}

		Integer tiLeGiamGia = (Integer)attributes.get("tiLeGiamGia");

		if (tiLeGiamGia != null) {
			setTiLeGiamGia(tiLeGiamGia);
		}

		String kichThuoc = (String)attributes.get("kichThuoc");

		if (kichThuoc != null) {
			setKichThuoc(kichThuoc);
		}

		Date hanSuDung = (Date)attributes.get("hanSuDung");

		if (hanSuDung != null) {
			setHanSuDung(hanSuDung);
		}

		Boolean hoatDong = (Boolean)attributes.get("hoatDong");

		if (hoatDong != null) {
			setHoatDong(hoatDong);
		}

		Boolean huy = (Boolean)attributes.get("huy");

		if (huy != null) {
			setHuy(huy);
		}
	}

	@JSON
	@Override
	public long getDonHangChiTietId() {
		return _donHangChiTietId;
	}

	@Override
	public void setDonHangChiTietId(long donHangChiTietId) {
		_donHangChiTietId = donHangChiTietId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getDonHangId() {
		return _donHangId;
	}

	@Override
	public void setDonHangId(long donHangId) {
		_columnBitmask |= DONHANGID_COLUMN_BITMASK;

		if (!_setOriginalDonHangId) {
			_setOriginalDonHangId = true;

			_originalDonHangId = _donHangId;
		}

		_donHangId = donHangId;
	}

	public long getOriginalDonHangId() {
		return _originalDonHangId;
	}

	@JSON
	@Override
	public long getMatHangId() {
		return _matHangId;
	}

	@Override
	public void setMatHangId(long matHangId) {
		_columnBitmask |= MATHANGID_COLUMN_BITMASK;

		if (!_setOriginalMatHangId) {
			_setOriginalMatHangId = true;

			_originalMatHangId = _matHangId;
		}

		_matHangId = matHangId;
	}

	public long getOriginalMatHangId() {
		return _originalMatHangId;
	}

	@JSON
	@Override
	public int getSoLuong() {
		return _soLuong;
	}

	@Override
	public void setSoLuong(int soLuong) {
		_soLuong = soLuong;
	}

	@JSON
	@Override
	public long getDonViTinhId() {
		return _donViTinhId;
	}

	@Override
	public void setDonViTinhId(long donViTinhId) {
		_donViTinhId = donViTinhId;
	}

	@JSON
	@Override
	public int getThanhTien() {
		return _thanhTien;
	}

	@Override
	public void setThanhTien(int thanhTien) {
		_thanhTien = thanhTien;
	}

	@JSON
	@Override
	public int getTiLeGiamGia() {
		return _tiLeGiamGia;
	}

	@Override
	public void setTiLeGiamGia(int tiLeGiamGia) {
		_tiLeGiamGia = tiLeGiamGia;
	}

	@JSON
	@Override
	public String getKichThuoc() {
		if (_kichThuoc == null) {
			return StringPool.BLANK;
		}
		else {
			return _kichThuoc;
		}
	}

	@Override
	public void setKichThuoc(String kichThuoc) {
		_kichThuoc = kichThuoc;
	}

	@JSON
	@Override
	public Date getHanSuDung() {
		return _hanSuDung;
	}

	@Override
	public void setHanSuDung(Date hanSuDung) {
		_hanSuDung = hanSuDung;
	}

	@JSON
	@Override
	public boolean getHoatDong() {
		return _hoatDong;
	}

	@Override
	public boolean isHoatDong() {
		return _hoatDong;
	}

	@Override
	public void setHoatDong(boolean hoatDong) {
		_columnBitmask |= HOATDONG_COLUMN_BITMASK;

		if (!_setOriginalHoatDong) {
			_setOriginalHoatDong = true;

			_originalHoatDong = _hoatDong;
		}

		_hoatDong = hoatDong;
	}

	public boolean getOriginalHoatDong() {
		return _originalHoatDong;
	}

	@JSON
	@Override
	public boolean getHuy() {
		return _huy;
	}

	@Override
	public boolean isHuy() {
		return _huy;
	}

	@Override
	public void setHuy(boolean huy) {
		_huy = huy;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DonHangChiTiet.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DonHangChiTiet toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DonHangChiTiet)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DonHangChiTietImpl donHangChiTietImpl = new DonHangChiTietImpl();

		donHangChiTietImpl.setDonHangChiTietId(getDonHangChiTietId());
		donHangChiTietImpl.setCompanyId(getCompanyId());
		donHangChiTietImpl.setUserId(getUserId());
		donHangChiTietImpl.setUserName(getUserName());
		donHangChiTietImpl.setCreateDate(getCreateDate());
		donHangChiTietImpl.setModifiedDate(getModifiedDate());
		donHangChiTietImpl.setDonHangId(getDonHangId());
		donHangChiTietImpl.setMatHangId(getMatHangId());
		donHangChiTietImpl.setSoLuong(getSoLuong());
		donHangChiTietImpl.setDonViTinhId(getDonViTinhId());
		donHangChiTietImpl.setThanhTien(getThanhTien());
		donHangChiTietImpl.setTiLeGiamGia(getTiLeGiamGia());
		donHangChiTietImpl.setKichThuoc(getKichThuoc());
		donHangChiTietImpl.setHanSuDung(getHanSuDung());
		donHangChiTietImpl.setHoatDong(getHoatDong());
		donHangChiTietImpl.setHuy(getHuy());

		donHangChiTietImpl.resetOriginalValues();

		return donHangChiTietImpl;
	}

	@Override
	public int compareTo(DonHangChiTiet donHangChiTiet) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				donHangChiTiet.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DonHangChiTiet)) {
			return false;
		}

		DonHangChiTiet donHangChiTiet = (DonHangChiTiet)obj;

		long primaryKey = donHangChiTiet.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DonHangChiTietModelImpl donHangChiTietModelImpl = this;

		donHangChiTietModelImpl._originalDonHangId = donHangChiTietModelImpl._donHangId;

		donHangChiTietModelImpl._setOriginalDonHangId = false;

		donHangChiTietModelImpl._originalMatHangId = donHangChiTietModelImpl._matHangId;

		donHangChiTietModelImpl._setOriginalMatHangId = false;

		donHangChiTietModelImpl._originalHoatDong = donHangChiTietModelImpl._hoatDong;

		donHangChiTietModelImpl._setOriginalHoatDong = false;

		donHangChiTietModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DonHangChiTiet> toCacheModel() {
		DonHangChiTietCacheModel donHangChiTietCacheModel = new DonHangChiTietCacheModel();

		donHangChiTietCacheModel.donHangChiTietId = getDonHangChiTietId();

		donHangChiTietCacheModel.companyId = getCompanyId();

		donHangChiTietCacheModel.userId = getUserId();

		donHangChiTietCacheModel.userName = getUserName();

		String userName = donHangChiTietCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			donHangChiTietCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			donHangChiTietCacheModel.createDate = createDate.getTime();
		}
		else {
			donHangChiTietCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			donHangChiTietCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			donHangChiTietCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		donHangChiTietCacheModel.donHangId = getDonHangId();

		donHangChiTietCacheModel.matHangId = getMatHangId();

		donHangChiTietCacheModel.soLuong = getSoLuong();

		donHangChiTietCacheModel.donViTinhId = getDonViTinhId();

		donHangChiTietCacheModel.thanhTien = getThanhTien();

		donHangChiTietCacheModel.tiLeGiamGia = getTiLeGiamGia();

		donHangChiTietCacheModel.kichThuoc = getKichThuoc();

		String kichThuoc = donHangChiTietCacheModel.kichThuoc;

		if ((kichThuoc != null) && (kichThuoc.length() == 0)) {
			donHangChiTietCacheModel.kichThuoc = null;
		}

		Date hanSuDung = getHanSuDung();

		if (hanSuDung != null) {
			donHangChiTietCacheModel.hanSuDung = hanSuDung.getTime();
		}
		else {
			donHangChiTietCacheModel.hanSuDung = Long.MIN_VALUE;
		}

		donHangChiTietCacheModel.hoatDong = getHoatDong();

		donHangChiTietCacheModel.huy = getHuy();

		return donHangChiTietCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{donHangChiTietId=");
		sb.append(getDonHangChiTietId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", donHangId=");
		sb.append(getDonHangId());
		sb.append(", matHangId=");
		sb.append(getMatHangId());
		sb.append(", soLuong=");
		sb.append(getSoLuong());
		sb.append(", donViTinhId=");
		sb.append(getDonViTinhId());
		sb.append(", thanhTien=");
		sb.append(getThanhTien());
		sb.append(", tiLeGiamGia=");
		sb.append(getTiLeGiamGia());
		sb.append(", kichThuoc=");
		sb.append(getKichThuoc());
		sb.append(", hanSuDung=");
		sb.append(getHanSuDung());
		sb.append(", hoatDong=");
		sb.append(getHoatDong());
		sb.append(", huy=");
		sb.append(getHuy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.minimart.portlet.banhang.model.DonHangChiTiet");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>donHangChiTietId</column-name><column-value><![CDATA[");
		sb.append(getDonHangChiTietId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>donHangId</column-name><column-value><![CDATA[");
		sb.append(getDonHangId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>matHangId</column-name><column-value><![CDATA[");
		sb.append(getMatHangId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>soLuong</column-name><column-value><![CDATA[");
		sb.append(getSoLuong());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>donViTinhId</column-name><column-value><![CDATA[");
		sb.append(getDonViTinhId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>thanhTien</column-name><column-value><![CDATA[");
		sb.append(getThanhTien());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tiLeGiamGia</column-name><column-value><![CDATA[");
		sb.append(getTiLeGiamGia());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>kichThuoc</column-name><column-value><![CDATA[");
		sb.append(getKichThuoc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hanSuDung</column-name><column-value><![CDATA[");
		sb.append(getHanSuDung());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hoatDong</column-name><column-value><![CDATA[");
		sb.append(getHoatDong());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>huy</column-name><column-value><![CDATA[");
		sb.append(getHuy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DonHangChiTiet.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DonHangChiTiet.class
		};
	private long _donHangChiTietId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _donHangId;
	private long _originalDonHangId;
	private boolean _setOriginalDonHangId;
	private long _matHangId;
	private long _originalMatHangId;
	private boolean _setOriginalMatHangId;
	private int _soLuong;
	private long _donViTinhId;
	private int _thanhTien;
	private int _tiLeGiamGia;
	private String _kichThuoc;
	private Date _hanSuDung;
	private boolean _hoatDong;
	private boolean _originalHoatDong;
	private boolean _setOriginalHoatDong;
	private boolean _huy;
	private long _columnBitmask;
	private DonHangChiTiet _escapedModel;
}