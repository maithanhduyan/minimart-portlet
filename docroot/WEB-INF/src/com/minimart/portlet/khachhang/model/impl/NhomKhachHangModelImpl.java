/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.minimart.portlet.khachhang.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.minimart.portlet.khachhang.model.NhomKhachHang;
import com.minimart.portlet.khachhang.model.NhomKhachHangModel;
import com.minimart.portlet.khachhang.model.NhomKhachHangSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the NhomKhachHang service. Represents a row in the &quot;minimart_nhomkhachhang&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.minimart.portlet.khachhang.model.NhomKhachHangModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NhomKhachHangImpl}.
 * </p>
 *
 * @author Mai Th√†nh Duy An
 * @see NhomKhachHangImpl
 * @see com.minimart.portlet.khachhang.model.NhomKhachHang
 * @see com.minimart.portlet.khachhang.model.NhomKhachHangModel
 * @generated
 */
@JSON(strict = true)
public class NhomKhachHangModelImpl extends BaseModelImpl<NhomKhachHang>
	implements NhomKhachHangModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a nhom khach hang model instance should use the {@link com.minimart.portlet.khachhang.model.NhomKhachHang} interface instead.
	 */
	public static final String TABLE_NAME = "minimart_nhomkhachhang";
	public static final Object[][] TABLE_COLUMNS = {
			{ "nhomKhachHangId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "ten", Types.VARCHAR },
			{ "hoatDong", Types.BOOLEAN },
			{ "diemTichLuy", Types.INTEGER },
			{ "tiLeGiamGia", Types.INTEGER },
			{ "uuTien", Types.INTEGER },
			{ "image", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table minimart_nhomkhachhang (nhomKhachHangId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,ten VARCHAR(75) null,hoatDong BOOLEAN,diemTichLuy INTEGER,tiLeGiamGia INTEGER,uuTien INTEGER,image VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table minimart_nhomkhachhang";
	public static final String ORDER_BY_JPQL = " ORDER BY nhomKhachHang.ten ASC";
	public static final String ORDER_BY_SQL = " ORDER BY minimart_nhomkhachhang.ten ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.minimart.portlet.khachhang.model.NhomKhachHang"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.minimart.portlet.khachhang.model.NhomKhachHang"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.minimart.portlet.khachhang.model.NhomKhachHang"),
			true);
	public static long HOATDONG_COLUMN_BITMASK = 1L;
	public static long TEN_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static NhomKhachHang toModel(NhomKhachHangSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		NhomKhachHang model = new NhomKhachHangImpl();

		model.setNhomKhachHangId(soapModel.getNhomKhachHangId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTen(soapModel.getTen());
		model.setHoatDong(soapModel.getHoatDong());
		model.setDiemTichLuy(soapModel.getDiemTichLuy());
		model.setTiLeGiamGia(soapModel.getTiLeGiamGia());
		model.setUuTien(soapModel.getUuTien());
		model.setImage(soapModel.getImage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<NhomKhachHang> toModels(NhomKhachHangSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<NhomKhachHang> models = new ArrayList<NhomKhachHang>(soapModels.length);

		for (NhomKhachHangSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.minimart.portlet.khachhang.model.NhomKhachHang"));

	public NhomKhachHangModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _nhomKhachHangId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNhomKhachHangId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _nhomKhachHangId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return NhomKhachHang.class;
	}

	@Override
	public String getModelClassName() {
		return NhomKhachHang.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("nhomKhachHangId", getNhomKhachHangId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("ten", getTen());
		attributes.put("hoatDong", getHoatDong());
		attributes.put("diemTichLuy", getDiemTichLuy());
		attributes.put("tiLeGiamGia", getTiLeGiamGia());
		attributes.put("uuTien", getUuTien());
		attributes.put("image", getImage());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long nhomKhachHangId = (Long)attributes.get("nhomKhachHangId");

		if (nhomKhachHangId != null) {
			setNhomKhachHangId(nhomKhachHangId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String ten = (String)attributes.get("ten");

		if (ten != null) {
			setTen(ten);
		}

		Boolean hoatDong = (Boolean)attributes.get("hoatDong");

		if (hoatDong != null) {
			setHoatDong(hoatDong);
		}

		Integer diemTichLuy = (Integer)attributes.get("diemTichLuy");

		if (diemTichLuy != null) {
			setDiemTichLuy(diemTichLuy);
		}

		Integer tiLeGiamGia = (Integer)attributes.get("tiLeGiamGia");

		if (tiLeGiamGia != null) {
			setTiLeGiamGia(tiLeGiamGia);
		}

		Integer uuTien = (Integer)attributes.get("uuTien");

		if (uuTien != null) {
			setUuTien(uuTien);
		}

		String image = (String)attributes.get("image");

		if (image != null) {
			setImage(image);
		}
	}

	@JSON
	@Override
	public long getNhomKhachHangId() {
		return _nhomKhachHangId;
	}

	@Override
	public void setNhomKhachHangId(long nhomKhachHangId) {
		_nhomKhachHangId = nhomKhachHangId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTen() {
		if (_ten == null) {
			return StringPool.BLANK;
		}
		else {
			return _ten;
		}
	}

	@Override
	public void setTen(String ten) {
		_columnBitmask = -1L;

		if (_originalTen == null) {
			_originalTen = _ten;
		}

		_ten = ten;
	}

	public String getOriginalTen() {
		return GetterUtil.getString(_originalTen);
	}

	@JSON
	@Override
	public boolean getHoatDong() {
		return _hoatDong;
	}

	@Override
	public boolean isHoatDong() {
		return _hoatDong;
	}

	@Override
	public void setHoatDong(boolean hoatDong) {
		_columnBitmask |= HOATDONG_COLUMN_BITMASK;

		if (!_setOriginalHoatDong) {
			_setOriginalHoatDong = true;

			_originalHoatDong = _hoatDong;
		}

		_hoatDong = hoatDong;
	}

	public boolean getOriginalHoatDong() {
		return _originalHoatDong;
	}

	@JSON
	@Override
	public int getDiemTichLuy() {
		return _diemTichLuy;
	}

	@Override
	public void setDiemTichLuy(int diemTichLuy) {
		_diemTichLuy = diemTichLuy;
	}

	@JSON
	@Override
	public int getTiLeGiamGia() {
		return _tiLeGiamGia;
	}

	@Override
	public void setTiLeGiamGia(int tiLeGiamGia) {
		_tiLeGiamGia = tiLeGiamGia;
	}

	@JSON
	@Override
	public int getUuTien() {
		return _uuTien;
	}

	@Override
	public void setUuTien(int uuTien) {
		_uuTien = uuTien;
	}

	@JSON
	@Override
	public String getImage() {
		if (_image == null) {
			return StringPool.BLANK;
		}
		else {
			return _image;
		}
	}

	@Override
	public void setImage(String image) {
		_image = image;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			NhomKhachHang.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public NhomKhachHang toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (NhomKhachHang)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NhomKhachHangImpl nhomKhachHangImpl = new NhomKhachHangImpl();

		nhomKhachHangImpl.setNhomKhachHangId(getNhomKhachHangId());
		nhomKhachHangImpl.setCompanyId(getCompanyId());
		nhomKhachHangImpl.setUserId(getUserId());
		nhomKhachHangImpl.setUserName(getUserName());
		nhomKhachHangImpl.setCreateDate(getCreateDate());
		nhomKhachHangImpl.setModifiedDate(getModifiedDate());
		nhomKhachHangImpl.setTen(getTen());
		nhomKhachHangImpl.setHoatDong(getHoatDong());
		nhomKhachHangImpl.setDiemTichLuy(getDiemTichLuy());
		nhomKhachHangImpl.setTiLeGiamGia(getTiLeGiamGia());
		nhomKhachHangImpl.setUuTien(getUuTien());
		nhomKhachHangImpl.setImage(getImage());

		nhomKhachHangImpl.resetOriginalValues();

		return nhomKhachHangImpl;
	}

	@Override
	public int compareTo(NhomKhachHang nhomKhachHang) {
		int value = 0;

		value = getTen().compareTo(nhomKhachHang.getTen());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof NhomKhachHang)) {
			return false;
		}

		NhomKhachHang nhomKhachHang = (NhomKhachHang)obj;

		long primaryKey = nhomKhachHang.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		NhomKhachHangModelImpl nhomKhachHangModelImpl = this;

		nhomKhachHangModelImpl._originalTen = nhomKhachHangModelImpl._ten;

		nhomKhachHangModelImpl._originalHoatDong = nhomKhachHangModelImpl._hoatDong;

		nhomKhachHangModelImpl._setOriginalHoatDong = false;

		nhomKhachHangModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<NhomKhachHang> toCacheModel() {
		NhomKhachHangCacheModel nhomKhachHangCacheModel = new NhomKhachHangCacheModel();

		nhomKhachHangCacheModel.nhomKhachHangId = getNhomKhachHangId();

		nhomKhachHangCacheModel.companyId = getCompanyId();

		nhomKhachHangCacheModel.userId = getUserId();

		nhomKhachHangCacheModel.userName = getUserName();

		String userName = nhomKhachHangCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			nhomKhachHangCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			nhomKhachHangCacheModel.createDate = createDate.getTime();
		}
		else {
			nhomKhachHangCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			nhomKhachHangCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			nhomKhachHangCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		nhomKhachHangCacheModel.ten = getTen();

		String ten = nhomKhachHangCacheModel.ten;

		if ((ten != null) && (ten.length() == 0)) {
			nhomKhachHangCacheModel.ten = null;
		}

		nhomKhachHangCacheModel.hoatDong = getHoatDong();

		nhomKhachHangCacheModel.diemTichLuy = getDiemTichLuy();

		nhomKhachHangCacheModel.tiLeGiamGia = getTiLeGiamGia();

		nhomKhachHangCacheModel.uuTien = getUuTien();

		nhomKhachHangCacheModel.image = getImage();

		String image = nhomKhachHangCacheModel.image;

		if ((image != null) && (image.length() == 0)) {
			nhomKhachHangCacheModel.image = null;
		}

		return nhomKhachHangCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{nhomKhachHangId=");
		sb.append(getNhomKhachHangId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", ten=");
		sb.append(getTen());
		sb.append(", hoatDong=");
		sb.append(getHoatDong());
		sb.append(", diemTichLuy=");
		sb.append(getDiemTichLuy());
		sb.append(", tiLeGiamGia=");
		sb.append(getTiLeGiamGia());
		sb.append(", uuTien=");
		sb.append(getUuTien());
		sb.append(", image=");
		sb.append(getImage());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.minimart.portlet.khachhang.model.NhomKhachHang");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>nhomKhachHangId</column-name><column-value><![CDATA[");
		sb.append(getNhomKhachHangId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ten</column-name><column-value><![CDATA[");
		sb.append(getTen());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hoatDong</column-name><column-value><![CDATA[");
		sb.append(getHoatDong());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>diemTichLuy</column-name><column-value><![CDATA[");
		sb.append(getDiemTichLuy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tiLeGiamGia</column-name><column-value><![CDATA[");
		sb.append(getTiLeGiamGia());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uuTien</column-name><column-value><![CDATA[");
		sb.append(getUuTien());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>image</column-name><column-value><![CDATA[");
		sb.append(getImage());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = NhomKhachHang.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			NhomKhachHang.class
		};
	private long _nhomKhachHangId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _ten;
	private String _originalTen;
	private boolean _hoatDong;
	private boolean _originalHoatDong;
	private boolean _setOriginalHoatDong;
	private int _diemTichLuy;
	private int _tiLeGiamGia;
	private int _uuTien;
	private String _image;
	private long _columnBitmask;
	private NhomKhachHang _escapedModel;
}