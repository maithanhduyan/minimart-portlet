/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.minimart.portlet.nhacungcap.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.minimart.portlet.nhacungcap.model.NhaCungCap;
import com.minimart.portlet.nhacungcap.service.NhaCungCapLocalService;
import com.minimart.portlet.nhacungcap.service.persistence.NhaCungCapPersistence;
import com.minimart.portlet.nhacungcap.service.persistence.NhomNhaCungCapPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the nha cung cap local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.minimart.portlet.nhacungcap.service.impl.NhaCungCapLocalServiceImpl}.
 * </p>
 *
 * @author Mai Th√†nh Duy An
 * @see com.minimart.portlet.nhacungcap.service.impl.NhaCungCapLocalServiceImpl
 * @see com.minimart.portlet.nhacungcap.service.NhaCungCapLocalServiceUtil
 * @generated
 */
public abstract class NhaCungCapLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements NhaCungCapLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.minimart.portlet.nhacungcap.service.NhaCungCapLocalServiceUtil} to access the nha cung cap local service.
	 */

	/**
	 * Adds the nha cung cap to the database. Also notifies the appropriate model listeners.
	 *
	 * @param nhaCungCap the nha cung cap
	 * @return the nha cung cap that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public NhaCungCap addNhaCungCap(NhaCungCap nhaCungCap)
		throws SystemException {
		nhaCungCap.setNew(true);

		return nhaCungCapPersistence.update(nhaCungCap);
	}

	/**
	 * Creates a new nha cung cap with the primary key. Does not add the nha cung cap to the database.
	 *
	 * @param nhaCungCapId the primary key for the new nha cung cap
	 * @return the new nha cung cap
	 */
	@Override
	public NhaCungCap createNhaCungCap(long nhaCungCapId) {
		return nhaCungCapPersistence.create(nhaCungCapId);
	}

	/**
	 * Deletes the nha cung cap with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param nhaCungCapId the primary key of the nha cung cap
	 * @return the nha cung cap that was removed
	 * @throws PortalException if a nha cung cap with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public NhaCungCap deleteNhaCungCap(long nhaCungCapId)
		throws PortalException, SystemException {
		return nhaCungCapPersistence.remove(nhaCungCapId);
	}

	/**
	 * Deletes the nha cung cap from the database. Also notifies the appropriate model listeners.
	 *
	 * @param nhaCungCap the nha cung cap
	 * @return the nha cung cap that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public NhaCungCap deleteNhaCungCap(NhaCungCap nhaCungCap)
		throws SystemException {
		return nhaCungCapPersistence.remove(nhaCungCap);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(NhaCungCap.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return nhaCungCapPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.minimart.portlet.nhacungcap.model.impl.NhaCungCapModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return nhaCungCapPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.minimart.portlet.nhacungcap.model.impl.NhaCungCapModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return nhaCungCapPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return nhaCungCapPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return nhaCungCapPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public NhaCungCap fetchNhaCungCap(long nhaCungCapId)
		throws SystemException {
		return nhaCungCapPersistence.fetchByPrimaryKey(nhaCungCapId);
	}

	/**
	 * Returns the nha cung cap with the primary key.
	 *
	 * @param nhaCungCapId the primary key of the nha cung cap
	 * @return the nha cung cap
	 * @throws PortalException if a nha cung cap with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public NhaCungCap getNhaCungCap(long nhaCungCapId)
		throws PortalException, SystemException {
		return nhaCungCapPersistence.findByPrimaryKey(nhaCungCapId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return nhaCungCapPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the nha cung caps.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.minimart.portlet.nhacungcap.model.impl.NhaCungCapModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of nha cung caps
	 * @param end the upper bound of the range of nha cung caps (not inclusive)
	 * @return the range of nha cung caps
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<NhaCungCap> getNhaCungCaps(int start, int end)
		throws SystemException {
		return nhaCungCapPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of nha cung caps.
	 *
	 * @return the number of nha cung caps
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getNhaCungCapsCount() throws SystemException {
		return nhaCungCapPersistence.countAll();
	}

	/**
	 * Updates the nha cung cap in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param nhaCungCap the nha cung cap
	 * @return the nha cung cap that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public NhaCungCap updateNhaCungCap(NhaCungCap nhaCungCap)
		throws SystemException {
		return nhaCungCapPersistence.update(nhaCungCap);
	}

	/**
	 * Returns the nha cung cap local service.
	 *
	 * @return the nha cung cap local service
	 */
	public com.minimart.portlet.nhacungcap.service.NhaCungCapLocalService getNhaCungCapLocalService() {
		return nhaCungCapLocalService;
	}

	/**
	 * Sets the nha cung cap local service.
	 *
	 * @param nhaCungCapLocalService the nha cung cap local service
	 */
	public void setNhaCungCapLocalService(
		com.minimart.portlet.nhacungcap.service.NhaCungCapLocalService nhaCungCapLocalService) {
		this.nhaCungCapLocalService = nhaCungCapLocalService;
	}

	/**
	 * Returns the nha cung cap remote service.
	 *
	 * @return the nha cung cap remote service
	 */
	public com.minimart.portlet.nhacungcap.service.NhaCungCapService getNhaCungCapService() {
		return nhaCungCapService;
	}

	/**
	 * Sets the nha cung cap remote service.
	 *
	 * @param nhaCungCapService the nha cung cap remote service
	 */
	public void setNhaCungCapService(
		com.minimart.portlet.nhacungcap.service.NhaCungCapService nhaCungCapService) {
		this.nhaCungCapService = nhaCungCapService;
	}

	/**
	 * Returns the nha cung cap persistence.
	 *
	 * @return the nha cung cap persistence
	 */
	public NhaCungCapPersistence getNhaCungCapPersistence() {
		return nhaCungCapPersistence;
	}

	/**
	 * Sets the nha cung cap persistence.
	 *
	 * @param nhaCungCapPersistence the nha cung cap persistence
	 */
	public void setNhaCungCapPersistence(
		NhaCungCapPersistence nhaCungCapPersistence) {
		this.nhaCungCapPersistence = nhaCungCapPersistence;
	}

	/**
	 * Returns the nhom nha cung cap local service.
	 *
	 * @return the nhom nha cung cap local service
	 */
	public com.minimart.portlet.nhacungcap.service.NhomNhaCungCapLocalService getNhomNhaCungCapLocalService() {
		return nhomNhaCungCapLocalService;
	}

	/**
	 * Sets the nhom nha cung cap local service.
	 *
	 * @param nhomNhaCungCapLocalService the nhom nha cung cap local service
	 */
	public void setNhomNhaCungCapLocalService(
		com.minimart.portlet.nhacungcap.service.NhomNhaCungCapLocalService nhomNhaCungCapLocalService) {
		this.nhomNhaCungCapLocalService = nhomNhaCungCapLocalService;
	}

	/**
	 * Returns the nhom nha cung cap remote service.
	 *
	 * @return the nhom nha cung cap remote service
	 */
	public com.minimart.portlet.nhacungcap.service.NhomNhaCungCapService getNhomNhaCungCapService() {
		return nhomNhaCungCapService;
	}

	/**
	 * Sets the nhom nha cung cap remote service.
	 *
	 * @param nhomNhaCungCapService the nhom nha cung cap remote service
	 */
	public void setNhomNhaCungCapService(
		com.minimart.portlet.nhacungcap.service.NhomNhaCungCapService nhomNhaCungCapService) {
		this.nhomNhaCungCapService = nhomNhaCungCapService;
	}

	/**
	 * Returns the nhom nha cung cap persistence.
	 *
	 * @return the nhom nha cung cap persistence
	 */
	public NhomNhaCungCapPersistence getNhomNhaCungCapPersistence() {
		return nhomNhaCungCapPersistence;
	}

	/**
	 * Sets the nhom nha cung cap persistence.
	 *
	 * @param nhomNhaCungCapPersistence the nhom nha cung cap persistence
	 */
	public void setNhomNhaCungCapPersistence(
		NhomNhaCungCapPersistence nhomNhaCungCapPersistence) {
		this.nhomNhaCungCapPersistence = nhomNhaCungCapPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.minimart.portlet.nhacungcap.model.NhaCungCap",
			nhaCungCapLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.minimart.portlet.nhacungcap.model.NhaCungCap");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return NhaCungCap.class;
	}

	protected String getModelClassName() {
		return NhaCungCap.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = nhaCungCapPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.minimart.portlet.nhacungcap.service.NhaCungCapLocalService.class)
	protected com.minimart.portlet.nhacungcap.service.NhaCungCapLocalService nhaCungCapLocalService;
	@BeanReference(type = com.minimart.portlet.nhacungcap.service.NhaCungCapService.class)
	protected com.minimart.portlet.nhacungcap.service.NhaCungCapService nhaCungCapService;
	@BeanReference(type = NhaCungCapPersistence.class)
	protected NhaCungCapPersistence nhaCungCapPersistence;
	@BeanReference(type = com.minimart.portlet.nhacungcap.service.NhomNhaCungCapLocalService.class)
	protected com.minimart.portlet.nhacungcap.service.NhomNhaCungCapLocalService nhomNhaCungCapLocalService;
	@BeanReference(type = com.minimart.portlet.nhacungcap.service.NhomNhaCungCapService.class)
	protected com.minimart.portlet.nhacungcap.service.NhomNhaCungCapService nhomNhaCungCapService;
	@BeanReference(type = NhomNhaCungCapPersistence.class)
	protected NhomNhaCungCapPersistence nhomNhaCungCapPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private NhaCungCapLocalServiceClpInvoker _clpInvoker = new NhaCungCapLocalServiceClpInvoker();
}