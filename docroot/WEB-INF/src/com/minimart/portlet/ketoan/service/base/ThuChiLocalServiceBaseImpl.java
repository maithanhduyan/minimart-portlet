/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.minimart.portlet.ketoan.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.minimart.portlet.ketoan.model.ThuChi;
import com.minimart.portlet.ketoan.service.ThuChiLocalService;
import com.minimart.portlet.ketoan.service.persistence.BangLuongPersistence;
import com.minimart.portlet.ketoan.service.persistence.ThuChiPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the thu chi local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.minimart.portlet.ketoan.service.impl.ThuChiLocalServiceImpl}.
 * </p>
 *
 * @author Mai Th√†nh Duy An
 * @see com.minimart.portlet.ketoan.service.impl.ThuChiLocalServiceImpl
 * @see com.minimart.portlet.ketoan.service.ThuChiLocalServiceUtil
 * @generated
 */
public abstract class ThuChiLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements ThuChiLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.minimart.portlet.ketoan.service.ThuChiLocalServiceUtil} to access the thu chi local service.
	 */

	/**
	 * Adds the thu chi to the database. Also notifies the appropriate model listeners.
	 *
	 * @param thuChi the thu chi
	 * @return the thu chi that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ThuChi addThuChi(ThuChi thuChi) throws SystemException {
		thuChi.setNew(true);

		return thuChiPersistence.update(thuChi);
	}

	/**
	 * Creates a new thu chi with the primary key. Does not add the thu chi to the database.
	 *
	 * @param thuChiId the primary key for the new thu chi
	 * @return the new thu chi
	 */
	@Override
	public ThuChi createThuChi(long thuChiId) {
		return thuChiPersistence.create(thuChiId);
	}

	/**
	 * Deletes the thu chi with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param thuChiId the primary key of the thu chi
	 * @return the thu chi that was removed
	 * @throws PortalException if a thu chi with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ThuChi deleteThuChi(long thuChiId)
		throws PortalException, SystemException {
		return thuChiPersistence.remove(thuChiId);
	}

	/**
	 * Deletes the thu chi from the database. Also notifies the appropriate model listeners.
	 *
	 * @param thuChi the thu chi
	 * @return the thu chi that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ThuChi deleteThuChi(ThuChi thuChi) throws SystemException {
		return thuChiPersistence.remove(thuChi);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ThuChi.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return thuChiPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.minimart.portlet.ketoan.model.impl.ThuChiModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return thuChiPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.minimart.portlet.ketoan.model.impl.ThuChiModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return thuChiPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return thuChiPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return thuChiPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public ThuChi fetchThuChi(long thuChiId) throws SystemException {
		return thuChiPersistence.fetchByPrimaryKey(thuChiId);
	}

	/**
	 * Returns the thu chi with the primary key.
	 *
	 * @param thuChiId the primary key of the thu chi
	 * @return the thu chi
	 * @throws PortalException if a thu chi with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ThuChi getThuChi(long thuChiId)
		throws PortalException, SystemException {
		return thuChiPersistence.findByPrimaryKey(thuChiId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return thuChiPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the thu chis.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.minimart.portlet.ketoan.model.impl.ThuChiModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of thu chis
	 * @param end the upper bound of the range of thu chis (not inclusive)
	 * @return the range of thu chis
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<ThuChi> getThuChis(int start, int end)
		throws SystemException {
		return thuChiPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of thu chis.
	 *
	 * @return the number of thu chis
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getThuChisCount() throws SystemException {
		return thuChiPersistence.countAll();
	}

	/**
	 * Updates the thu chi in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param thuChi the thu chi
	 * @return the thu chi that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ThuChi updateThuChi(ThuChi thuChi) throws SystemException {
		return thuChiPersistence.update(thuChi);
	}

	/**
	 * Returns the bang luong local service.
	 *
	 * @return the bang luong local service
	 */
	public com.minimart.portlet.ketoan.service.BangLuongLocalService getBangLuongLocalService() {
		return bangLuongLocalService;
	}

	/**
	 * Sets the bang luong local service.
	 *
	 * @param bangLuongLocalService the bang luong local service
	 */
	public void setBangLuongLocalService(
		com.minimart.portlet.ketoan.service.BangLuongLocalService bangLuongLocalService) {
		this.bangLuongLocalService = bangLuongLocalService;
	}

	/**
	 * Returns the bang luong remote service.
	 *
	 * @return the bang luong remote service
	 */
	public com.minimart.portlet.ketoan.service.BangLuongService getBangLuongService() {
		return bangLuongService;
	}

	/**
	 * Sets the bang luong remote service.
	 *
	 * @param bangLuongService the bang luong remote service
	 */
	public void setBangLuongService(
		com.minimart.portlet.ketoan.service.BangLuongService bangLuongService) {
		this.bangLuongService = bangLuongService;
	}

	/**
	 * Returns the bang luong persistence.
	 *
	 * @return the bang luong persistence
	 */
	public BangLuongPersistence getBangLuongPersistence() {
		return bangLuongPersistence;
	}

	/**
	 * Sets the bang luong persistence.
	 *
	 * @param bangLuongPersistence the bang luong persistence
	 */
	public void setBangLuongPersistence(
		BangLuongPersistence bangLuongPersistence) {
		this.bangLuongPersistence = bangLuongPersistence;
	}

	/**
	 * Returns the thu chi local service.
	 *
	 * @return the thu chi local service
	 */
	public com.minimart.portlet.ketoan.service.ThuChiLocalService getThuChiLocalService() {
		return thuChiLocalService;
	}

	/**
	 * Sets the thu chi local service.
	 *
	 * @param thuChiLocalService the thu chi local service
	 */
	public void setThuChiLocalService(
		com.minimart.portlet.ketoan.service.ThuChiLocalService thuChiLocalService) {
		this.thuChiLocalService = thuChiLocalService;
	}

	/**
	 * Returns the thu chi remote service.
	 *
	 * @return the thu chi remote service
	 */
	public com.minimart.portlet.ketoan.service.ThuChiService getThuChiService() {
		return thuChiService;
	}

	/**
	 * Sets the thu chi remote service.
	 *
	 * @param thuChiService the thu chi remote service
	 */
	public void setThuChiService(
		com.minimart.portlet.ketoan.service.ThuChiService thuChiService) {
		this.thuChiService = thuChiService;
	}

	/**
	 * Returns the thu chi persistence.
	 *
	 * @return the thu chi persistence
	 */
	public ThuChiPersistence getThuChiPersistence() {
		return thuChiPersistence;
	}

	/**
	 * Sets the thu chi persistence.
	 *
	 * @param thuChiPersistence the thu chi persistence
	 */
	public void setThuChiPersistence(ThuChiPersistence thuChiPersistence) {
		this.thuChiPersistence = thuChiPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.minimart.portlet.ketoan.model.ThuChi",
			thuChiLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.minimart.portlet.ketoan.model.ThuChi");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return ThuChi.class;
	}

	protected String getModelClassName() {
		return ThuChi.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = thuChiPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.minimart.portlet.ketoan.service.BangLuongLocalService.class)
	protected com.minimart.portlet.ketoan.service.BangLuongLocalService bangLuongLocalService;
	@BeanReference(type = com.minimart.portlet.ketoan.service.BangLuongService.class)
	protected com.minimart.portlet.ketoan.service.BangLuongService bangLuongService;
	@BeanReference(type = BangLuongPersistence.class)
	protected BangLuongPersistence bangLuongPersistence;
	@BeanReference(type = com.minimart.portlet.ketoan.service.ThuChiLocalService.class)
	protected com.minimart.portlet.ketoan.service.ThuChiLocalService thuChiLocalService;
	@BeanReference(type = com.minimart.portlet.ketoan.service.ThuChiService.class)
	protected com.minimart.portlet.ketoan.service.ThuChiService thuChiService;
	@BeanReference(type = ThuChiPersistence.class)
	protected ThuChiPersistence thuChiPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private ThuChiLocalServiceClpInvoker _clpInvoker = new ThuChiLocalServiceClpInvoker();
}