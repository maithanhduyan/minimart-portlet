/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.minimart.portlet.mathang.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import com.minimart.portlet.mathang.model.DonViTinh;
import com.minimart.portlet.mathang.service.DonViTinhService;
import com.minimart.portlet.mathang.service.persistence.DonViTinhPersistence;
import com.minimart.portlet.mathang.service.persistence.MatHangPersistence;
import com.minimart.portlet.mathang.service.persistence.NhomMatHangPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the don vi tinh remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.minimart.portlet.mathang.service.impl.DonViTinhServiceImpl}.
 * </p>
 *
 * @author Mai Th√†nh Duy An
 * @see com.minimart.portlet.mathang.service.impl.DonViTinhServiceImpl
 * @see com.minimart.portlet.mathang.service.DonViTinhServiceUtil
 * @generated
 */
public abstract class DonViTinhServiceBaseImpl extends BaseServiceImpl
	implements DonViTinhService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.minimart.portlet.mathang.service.DonViTinhServiceUtil} to access the don vi tinh remote service.
	 */

	/**
	 * Returns the don vi tinh local service.
	 *
	 * @return the don vi tinh local service
	 */
	public com.minimart.portlet.mathang.service.DonViTinhLocalService getDonViTinhLocalService() {
		return donViTinhLocalService;
	}

	/**
	 * Sets the don vi tinh local service.
	 *
	 * @param donViTinhLocalService the don vi tinh local service
	 */
	public void setDonViTinhLocalService(
		com.minimart.portlet.mathang.service.DonViTinhLocalService donViTinhLocalService) {
		this.donViTinhLocalService = donViTinhLocalService;
	}

	/**
	 * Returns the don vi tinh remote service.
	 *
	 * @return the don vi tinh remote service
	 */
	public com.minimart.portlet.mathang.service.DonViTinhService getDonViTinhService() {
		return donViTinhService;
	}

	/**
	 * Sets the don vi tinh remote service.
	 *
	 * @param donViTinhService the don vi tinh remote service
	 */
	public void setDonViTinhService(
		com.minimart.portlet.mathang.service.DonViTinhService donViTinhService) {
		this.donViTinhService = donViTinhService;
	}

	/**
	 * Returns the don vi tinh persistence.
	 *
	 * @return the don vi tinh persistence
	 */
	public DonViTinhPersistence getDonViTinhPersistence() {
		return donViTinhPersistence;
	}

	/**
	 * Sets the don vi tinh persistence.
	 *
	 * @param donViTinhPersistence the don vi tinh persistence
	 */
	public void setDonViTinhPersistence(
		DonViTinhPersistence donViTinhPersistence) {
		this.donViTinhPersistence = donViTinhPersistence;
	}

	/**
	 * Returns the mat hang local service.
	 *
	 * @return the mat hang local service
	 */
	public com.minimart.portlet.mathang.service.MatHangLocalService getMatHangLocalService() {
		return matHangLocalService;
	}

	/**
	 * Sets the mat hang local service.
	 *
	 * @param matHangLocalService the mat hang local service
	 */
	public void setMatHangLocalService(
		com.minimart.portlet.mathang.service.MatHangLocalService matHangLocalService) {
		this.matHangLocalService = matHangLocalService;
	}

	/**
	 * Returns the mat hang remote service.
	 *
	 * @return the mat hang remote service
	 */
	public com.minimart.portlet.mathang.service.MatHangService getMatHangService() {
		return matHangService;
	}

	/**
	 * Sets the mat hang remote service.
	 *
	 * @param matHangService the mat hang remote service
	 */
	public void setMatHangService(
		com.minimart.portlet.mathang.service.MatHangService matHangService) {
		this.matHangService = matHangService;
	}

	/**
	 * Returns the mat hang persistence.
	 *
	 * @return the mat hang persistence
	 */
	public MatHangPersistence getMatHangPersistence() {
		return matHangPersistence;
	}

	/**
	 * Sets the mat hang persistence.
	 *
	 * @param matHangPersistence the mat hang persistence
	 */
	public void setMatHangPersistence(MatHangPersistence matHangPersistence) {
		this.matHangPersistence = matHangPersistence;
	}

	/**
	 * Returns the nhom mat hang local service.
	 *
	 * @return the nhom mat hang local service
	 */
	public com.minimart.portlet.mathang.service.NhomMatHangLocalService getNhomMatHangLocalService() {
		return nhomMatHangLocalService;
	}

	/**
	 * Sets the nhom mat hang local service.
	 *
	 * @param nhomMatHangLocalService the nhom mat hang local service
	 */
	public void setNhomMatHangLocalService(
		com.minimart.portlet.mathang.service.NhomMatHangLocalService nhomMatHangLocalService) {
		this.nhomMatHangLocalService = nhomMatHangLocalService;
	}

	/**
	 * Returns the nhom mat hang remote service.
	 *
	 * @return the nhom mat hang remote service
	 */
	public com.minimart.portlet.mathang.service.NhomMatHangService getNhomMatHangService() {
		return nhomMatHangService;
	}

	/**
	 * Sets the nhom mat hang remote service.
	 *
	 * @param nhomMatHangService the nhom mat hang remote service
	 */
	public void setNhomMatHangService(
		com.minimart.portlet.mathang.service.NhomMatHangService nhomMatHangService) {
		this.nhomMatHangService = nhomMatHangService;
	}

	/**
	 * Returns the nhom mat hang persistence.
	 *
	 * @return the nhom mat hang persistence
	 */
	public NhomMatHangPersistence getNhomMatHangPersistence() {
		return nhomMatHangPersistence;
	}

	/**
	 * Sets the nhom mat hang persistence.
	 *
	 * @param nhomMatHangPersistence the nhom mat hang persistence
	 */
	public void setNhomMatHangPersistence(
		NhomMatHangPersistence nhomMatHangPersistence) {
		this.nhomMatHangPersistence = nhomMatHangPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();
	}

	public void destroy() {
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return DonViTinh.class;
	}

	protected String getModelClassName() {
		return DonViTinh.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = donViTinhPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.minimart.portlet.mathang.service.DonViTinhLocalService.class)
	protected com.minimart.portlet.mathang.service.DonViTinhLocalService donViTinhLocalService;
	@BeanReference(type = com.minimart.portlet.mathang.service.DonViTinhService.class)
	protected com.minimart.portlet.mathang.service.DonViTinhService donViTinhService;
	@BeanReference(type = DonViTinhPersistence.class)
	protected DonViTinhPersistence donViTinhPersistence;
	@BeanReference(type = com.minimart.portlet.mathang.service.MatHangLocalService.class)
	protected com.minimart.portlet.mathang.service.MatHangLocalService matHangLocalService;
	@BeanReference(type = com.minimart.portlet.mathang.service.MatHangService.class)
	protected com.minimart.portlet.mathang.service.MatHangService matHangService;
	@BeanReference(type = MatHangPersistence.class)
	protected MatHangPersistence matHangPersistence;
	@BeanReference(type = com.minimart.portlet.mathang.service.NhomMatHangLocalService.class)
	protected com.minimart.portlet.mathang.service.NhomMatHangLocalService nhomMatHangLocalService;
	@BeanReference(type = com.minimart.portlet.mathang.service.NhomMatHangService.class)
	protected com.minimart.portlet.mathang.service.NhomMatHangService nhomMatHangService;
	@BeanReference(type = NhomMatHangPersistence.class)
	protected NhomMatHangPersistence nhomMatHangPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private DonViTinhServiceClpInvoker _clpInvoker = new DonViTinhServiceClpInvoker();
}