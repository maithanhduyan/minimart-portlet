/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.minimart.portlet.mathang.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.minimart.portlet.mathang.model.MatHang;
import com.minimart.portlet.mathang.model.MatHangModel;
import com.minimart.portlet.mathang.model.MatHangSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MatHang service. Represents a row in the &quot;minimart_mathang&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.minimart.portlet.mathang.model.MatHangModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MatHangImpl}.
 * </p>
 *
 * @author Mai Th√†nh Duy An
 * @see MatHangImpl
 * @see com.minimart.portlet.mathang.model.MatHang
 * @see com.minimart.portlet.mathang.model.MatHangModel
 * @generated
 */
@JSON(strict = true)
public class MatHangModelImpl extends BaseModelImpl<MatHang>
	implements MatHangModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mat hang model instance should use the {@link com.minimart.portlet.mathang.model.MatHang} interface instead.
	 */
	public static final String TABLE_NAME = "minimart_mathang";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "matHangId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "code_", Types.VARCHAR },
			{ "giaNhap", Types.INTEGER },
			{ "status", Types.INTEGER },
			{ "giaBan", Types.INTEGER },
			{ "giaBan1", Types.INTEGER },
			{ "giaBan2", Types.INTEGER },
			{ "giaBan3", Types.INTEGER },
			{ "tonToiThieu", Types.INTEGER },
			{ "tonToiDa", Types.INTEGER },
			{ "giaVon", Types.INTEGER },
			{ "hoaHong", Types.INTEGER },
			{ "nhomMatHangId", Types.BIGINT },
			{ "donViTinhId", Types.BIGINT },
			{ "size_", Types.VARCHAR },
			{ "imageUrl", Types.VARCHAR },
			{ "hoatDong", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table minimart_mathang (uuid_ VARCHAR(75) null,matHangId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,code_ VARCHAR(75) null,giaNhap INTEGER,status INTEGER,giaBan INTEGER,giaBan1 INTEGER,giaBan2 INTEGER,giaBan3 INTEGER,tonToiThieu INTEGER,tonToiDa INTEGER,giaVon INTEGER,hoaHong INTEGER,nhomMatHangId LONG,donViTinhId LONG,size_ VARCHAR(75) null,imageUrl VARCHAR(75) null,hoatDong BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table minimart_mathang";
	public static final String ORDER_BY_JPQL = " ORDER BY matHang.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY minimart_mathang.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.minimart.portlet.mathang.model.MatHang"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.minimart.portlet.mathang.model.MatHang"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.minimart.portlet.mathang.model.MatHang"),
			true);
	public static long CODE_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long HOATDONG_COLUMN_BITMASK = 8L;
	public static long NAME_COLUMN_BITMASK = 16L;
	public static long STATUS_COLUMN_BITMASK = 32L;
	public static long USERID_COLUMN_BITMASK = 64L;
	public static long UUID_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MatHang toModel(MatHangSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MatHang model = new MatHangImpl();

		model.setUuid(soapModel.getUuid());
		model.setMatHangId(soapModel.getMatHangId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setCode(soapModel.getCode());
		model.setGiaNhap(soapModel.getGiaNhap());
		model.setStatus(soapModel.getStatus());
		model.setGiaBan(soapModel.getGiaBan());
		model.setGiaBan1(soapModel.getGiaBan1());
		model.setGiaBan2(soapModel.getGiaBan2());
		model.setGiaBan3(soapModel.getGiaBan3());
		model.setTonToiThieu(soapModel.getTonToiThieu());
		model.setTonToiDa(soapModel.getTonToiDa());
		model.setGiaVon(soapModel.getGiaVon());
		model.setHoaHong(soapModel.getHoaHong());
		model.setNhomMatHangId(soapModel.getNhomMatHangId());
		model.setDonViTinhId(soapModel.getDonViTinhId());
		model.setSize(soapModel.getSize());
		model.setImageUrl(soapModel.getImageUrl());
		model.setHoatDong(soapModel.getHoatDong());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MatHang> toModels(MatHangSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MatHang> models = new ArrayList<MatHang>(soapModels.length);

		for (MatHangSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.minimart.portlet.mathang.model.MatHang"));

	public MatHangModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _matHangId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMatHangId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _matHangId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MatHang.class;
	}

	@Override
	public String getModelClassName() {
		return MatHang.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("matHangId", getMatHangId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("code", getCode());
		attributes.put("giaNhap", getGiaNhap());
		attributes.put("status", getStatus());
		attributes.put("giaBan", getGiaBan());
		attributes.put("giaBan1", getGiaBan1());
		attributes.put("giaBan2", getGiaBan2());
		attributes.put("giaBan3", getGiaBan3());
		attributes.put("tonToiThieu", getTonToiThieu());
		attributes.put("tonToiDa", getTonToiDa());
		attributes.put("giaVon", getGiaVon());
		attributes.put("hoaHong", getHoaHong());
		attributes.put("nhomMatHangId", getNhomMatHangId());
		attributes.put("donViTinhId", getDonViTinhId());
		attributes.put("size", getSize());
		attributes.put("imageUrl", getImageUrl());
		attributes.put("hoatDong", getHoatDong());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long matHangId = (Long)attributes.get("matHangId");

		if (matHangId != null) {
			setMatHangId(matHangId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		Integer giaNhap = (Integer)attributes.get("giaNhap");

		if (giaNhap != null) {
			setGiaNhap(giaNhap);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Integer giaBan = (Integer)attributes.get("giaBan");

		if (giaBan != null) {
			setGiaBan(giaBan);
		}

		Integer giaBan1 = (Integer)attributes.get("giaBan1");

		if (giaBan1 != null) {
			setGiaBan1(giaBan1);
		}

		Integer giaBan2 = (Integer)attributes.get("giaBan2");

		if (giaBan2 != null) {
			setGiaBan2(giaBan2);
		}

		Integer giaBan3 = (Integer)attributes.get("giaBan3");

		if (giaBan3 != null) {
			setGiaBan3(giaBan3);
		}

		Integer tonToiThieu = (Integer)attributes.get("tonToiThieu");

		if (tonToiThieu != null) {
			setTonToiThieu(tonToiThieu);
		}

		Integer tonToiDa = (Integer)attributes.get("tonToiDa");

		if (tonToiDa != null) {
			setTonToiDa(tonToiDa);
		}

		Integer giaVon = (Integer)attributes.get("giaVon");

		if (giaVon != null) {
			setGiaVon(giaVon);
		}

		Integer hoaHong = (Integer)attributes.get("hoaHong");

		if (hoaHong != null) {
			setHoaHong(hoaHong);
		}

		Long nhomMatHangId = (Long)attributes.get("nhomMatHangId");

		if (nhomMatHangId != null) {
			setNhomMatHangId(nhomMatHangId);
		}

		Long donViTinhId = (Long)attributes.get("donViTinhId");

		if (donViTinhId != null) {
			setDonViTinhId(donViTinhId);
		}

		String size = (String)attributes.get("size");

		if (size != null) {
			setSize(size);
		}

		String imageUrl = (String)attributes.get("imageUrl");

		if (imageUrl != null) {
			setImageUrl(imageUrl);
		}

		Boolean hoatDong = (Boolean)attributes.get("hoatDong");

		if (hoatDong != null) {
			setHoatDong(hoatDong);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getMatHangId() {
		return _matHangId;
	}

	@Override
	public void setMatHangId(long matHangId) {
		_matHangId = matHangId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@JSON
	@Override
	public int getGiaNhap() {
		return _giaNhap;
	}

	@Override
	public void setGiaNhap(int giaNhap) {
		_giaNhap = giaNhap;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public int getGiaBan() {
		return _giaBan;
	}

	@Override
	public void setGiaBan(int giaBan) {
		_giaBan = giaBan;
	}

	@JSON
	@Override
	public int getGiaBan1() {
		return _giaBan1;
	}

	@Override
	public void setGiaBan1(int giaBan1) {
		_giaBan1 = giaBan1;
	}

	@JSON
	@Override
	public int getGiaBan2() {
		return _giaBan2;
	}

	@Override
	public void setGiaBan2(int giaBan2) {
		_giaBan2 = giaBan2;
	}

	@JSON
	@Override
	public int getGiaBan3() {
		return _giaBan3;
	}

	@Override
	public void setGiaBan3(int giaBan3) {
		_giaBan3 = giaBan3;
	}

	@JSON
	@Override
	public int getTonToiThieu() {
		return _tonToiThieu;
	}

	@Override
	public void setTonToiThieu(int tonToiThieu) {
		_tonToiThieu = tonToiThieu;
	}

	@JSON
	@Override
	public int getTonToiDa() {
		return _tonToiDa;
	}

	@Override
	public void setTonToiDa(int tonToiDa) {
		_tonToiDa = tonToiDa;
	}

	@JSON
	@Override
	public int getGiaVon() {
		return _giaVon;
	}

	@Override
	public void setGiaVon(int giaVon) {
		_giaVon = giaVon;
	}

	@JSON
	@Override
	public int getHoaHong() {
		return _hoaHong;
	}

	@Override
	public void setHoaHong(int hoaHong) {
		_hoaHong = hoaHong;
	}

	@JSON
	@Override
	public long getNhomMatHangId() {
		return _nhomMatHangId;
	}

	@Override
	public void setNhomMatHangId(long nhomMatHangId) {
		_nhomMatHangId = nhomMatHangId;
	}

	@JSON
	@Override
	public long getDonViTinhId() {
		return _donViTinhId;
	}

	@Override
	public void setDonViTinhId(long donViTinhId) {
		_donViTinhId = donViTinhId;
	}

	@JSON
	@Override
	public String getSize() {
		if (_size == null) {
			return StringPool.BLANK;
		}
		else {
			return _size;
		}
	}

	@Override
	public void setSize(String size) {
		_size = size;
	}

	@JSON
	@Override
	public String getImageUrl() {
		if (_imageUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _imageUrl;
		}
	}

	@Override
	public void setImageUrl(String imageUrl) {
		_imageUrl = imageUrl;
	}

	@JSON
	@Override
	public boolean getHoatDong() {
		return _hoatDong;
	}

	@Override
	public boolean isHoatDong() {
		return _hoatDong;
	}

	@Override
	public void setHoatDong(boolean hoatDong) {
		_columnBitmask |= HOATDONG_COLUMN_BITMASK;

		if (!_setOriginalHoatDong) {
			_setOriginalHoatDong = true;

			_originalHoatDong = _hoatDong;
		}

		_hoatDong = hoatDong;
	}

	public boolean getOriginalHoatDong() {
		return _originalHoatDong;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				MatHang.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			MatHang.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MatHang toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (MatHang)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MatHangImpl matHangImpl = new MatHangImpl();

		matHangImpl.setUuid(getUuid());
		matHangImpl.setMatHangId(getMatHangId());
		matHangImpl.setGroupId(getGroupId());
		matHangImpl.setCompanyId(getCompanyId());
		matHangImpl.setUserId(getUserId());
		matHangImpl.setUserName(getUserName());
		matHangImpl.setCreateDate(getCreateDate());
		matHangImpl.setModifiedDate(getModifiedDate());
		matHangImpl.setName(getName());
		matHangImpl.setCode(getCode());
		matHangImpl.setGiaNhap(getGiaNhap());
		matHangImpl.setStatus(getStatus());
		matHangImpl.setGiaBan(getGiaBan());
		matHangImpl.setGiaBan1(getGiaBan1());
		matHangImpl.setGiaBan2(getGiaBan2());
		matHangImpl.setGiaBan3(getGiaBan3());
		matHangImpl.setTonToiThieu(getTonToiThieu());
		matHangImpl.setTonToiDa(getTonToiDa());
		matHangImpl.setGiaVon(getGiaVon());
		matHangImpl.setHoaHong(getHoaHong());
		matHangImpl.setNhomMatHangId(getNhomMatHangId());
		matHangImpl.setDonViTinhId(getDonViTinhId());
		matHangImpl.setSize(getSize());
		matHangImpl.setImageUrl(getImageUrl());
		matHangImpl.setHoatDong(getHoatDong());

		matHangImpl.resetOriginalValues();

		return matHangImpl;
	}

	@Override
	public int compareTo(MatHang matHang) {
		int value = 0;

		value = getName().compareTo(matHang.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MatHang)) {
			return false;
		}

		MatHang matHang = (MatHang)obj;

		long primaryKey = matHang.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MatHangModelImpl matHangModelImpl = this;

		matHangModelImpl._originalUuid = matHangModelImpl._uuid;

		matHangModelImpl._originalGroupId = matHangModelImpl._groupId;

		matHangModelImpl._setOriginalGroupId = false;

		matHangModelImpl._originalCompanyId = matHangModelImpl._companyId;

		matHangModelImpl._setOriginalCompanyId = false;

		matHangModelImpl._originalUserId = matHangModelImpl._userId;

		matHangModelImpl._setOriginalUserId = false;

		matHangModelImpl._originalName = matHangModelImpl._name;

		matHangModelImpl._originalCode = matHangModelImpl._code;

		matHangModelImpl._originalStatus = matHangModelImpl._status;

		matHangModelImpl._setOriginalStatus = false;

		matHangModelImpl._originalHoatDong = matHangModelImpl._hoatDong;

		matHangModelImpl._setOriginalHoatDong = false;

		matHangModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MatHang> toCacheModel() {
		MatHangCacheModel matHangCacheModel = new MatHangCacheModel();

		matHangCacheModel.uuid = getUuid();

		String uuid = matHangCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			matHangCacheModel.uuid = null;
		}

		matHangCacheModel.matHangId = getMatHangId();

		matHangCacheModel.groupId = getGroupId();

		matHangCacheModel.companyId = getCompanyId();

		matHangCacheModel.userId = getUserId();

		matHangCacheModel.userName = getUserName();

		String userName = matHangCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			matHangCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			matHangCacheModel.createDate = createDate.getTime();
		}
		else {
			matHangCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			matHangCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			matHangCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		matHangCacheModel.name = getName();

		String name = matHangCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			matHangCacheModel.name = null;
		}

		matHangCacheModel.code = getCode();

		String code = matHangCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			matHangCacheModel.code = null;
		}

		matHangCacheModel.giaNhap = getGiaNhap();

		matHangCacheModel.status = getStatus();

		matHangCacheModel.giaBan = getGiaBan();

		matHangCacheModel.giaBan1 = getGiaBan1();

		matHangCacheModel.giaBan2 = getGiaBan2();

		matHangCacheModel.giaBan3 = getGiaBan3();

		matHangCacheModel.tonToiThieu = getTonToiThieu();

		matHangCacheModel.tonToiDa = getTonToiDa();

		matHangCacheModel.giaVon = getGiaVon();

		matHangCacheModel.hoaHong = getHoaHong();

		matHangCacheModel.nhomMatHangId = getNhomMatHangId();

		matHangCacheModel.donViTinhId = getDonViTinhId();

		matHangCacheModel.size = getSize();

		String size = matHangCacheModel.size;

		if ((size != null) && (size.length() == 0)) {
			matHangCacheModel.size = null;
		}

		matHangCacheModel.imageUrl = getImageUrl();

		String imageUrl = matHangCacheModel.imageUrl;

		if ((imageUrl != null) && (imageUrl.length() == 0)) {
			matHangCacheModel.imageUrl = null;
		}

		matHangCacheModel.hoatDong = getHoatDong();

		return matHangCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(51);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", matHangId=");
		sb.append(getMatHangId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", giaNhap=");
		sb.append(getGiaNhap());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", giaBan=");
		sb.append(getGiaBan());
		sb.append(", giaBan1=");
		sb.append(getGiaBan1());
		sb.append(", giaBan2=");
		sb.append(getGiaBan2());
		sb.append(", giaBan3=");
		sb.append(getGiaBan3());
		sb.append(", tonToiThieu=");
		sb.append(getTonToiThieu());
		sb.append(", tonToiDa=");
		sb.append(getTonToiDa());
		sb.append(", giaVon=");
		sb.append(getGiaVon());
		sb.append(", hoaHong=");
		sb.append(getHoaHong());
		sb.append(", nhomMatHangId=");
		sb.append(getNhomMatHangId());
		sb.append(", donViTinhId=");
		sb.append(getDonViTinhId());
		sb.append(", size=");
		sb.append(getSize());
		sb.append(", imageUrl=");
		sb.append(getImageUrl());
		sb.append(", hoatDong=");
		sb.append(getHoatDong());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(79);

		sb.append("<model><model-name>");
		sb.append("com.minimart.portlet.mathang.model.MatHang");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>matHangId</column-name><column-value><![CDATA[");
		sb.append(getMatHangId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>giaNhap</column-name><column-value><![CDATA[");
		sb.append(getGiaNhap());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>giaBan</column-name><column-value><![CDATA[");
		sb.append(getGiaBan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>giaBan1</column-name><column-value><![CDATA[");
		sb.append(getGiaBan1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>giaBan2</column-name><column-value><![CDATA[");
		sb.append(getGiaBan2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>giaBan3</column-name><column-value><![CDATA[");
		sb.append(getGiaBan3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tonToiThieu</column-name><column-value><![CDATA[");
		sb.append(getTonToiThieu());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tonToiDa</column-name><column-value><![CDATA[");
		sb.append(getTonToiDa());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>giaVon</column-name><column-value><![CDATA[");
		sb.append(getGiaVon());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hoaHong</column-name><column-value><![CDATA[");
		sb.append(getHoaHong());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nhomMatHangId</column-name><column-value><![CDATA[");
		sb.append(getNhomMatHangId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>donViTinhId</column-name><column-value><![CDATA[");
		sb.append(getDonViTinhId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>size</column-name><column-value><![CDATA[");
		sb.append(getSize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageUrl</column-name><column-value><![CDATA[");
		sb.append(getImageUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hoatDong</column-name><column-value><![CDATA[");
		sb.append(getHoatDong());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MatHang.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			MatHang.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _matHangId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _name;
	private String _originalName;
	private String _code;
	private String _originalCode;
	private int _giaNhap;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private int _giaBan;
	private int _giaBan1;
	private int _giaBan2;
	private int _giaBan3;
	private int _tonToiThieu;
	private int _tonToiDa;
	private int _giaVon;
	private int _hoaHong;
	private long _nhomMatHangId;
	private long _donViTinhId;
	private String _size;
	private String _imageUrl;
	private boolean _hoatDong;
	private boolean _originalHoatDong;
	private boolean _setOriginalHoatDong;
	private long _columnBitmask;
	private MatHang _escapedModel;
}